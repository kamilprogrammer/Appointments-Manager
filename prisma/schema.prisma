generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  password  String
  email     String   @unique
  passwordChangedAt DateTime?
  doctor Doctor?
  patient Patient?
  messages Message[]
  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt

  @@map("Users")
}

model Patient {
  id          Int           @id @default(autoincrement())
  firstname   String?
  lastname    String?
  gender      String
  dateOfBirth DateTime?
  address     String?
  phone       String        @unique
  parentId    Int?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime? @updatedAt
  appoinments Appointment[]
  chats Chat[]
  parent      Patient?      @relation("Family", fields: [parentId], references: [id], onDelete: SetNull)
  children    Patient[]     @relation("Family")
  user        User?   @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId Int? @unique

  @@map("Patients")
}

model Doctor {
  id          Int           @id @default(autoincrement())
  firstname   String
  lastname    String?
  phone       String?        
  gender      String
  address String?
  dateofBirth DateTime?
  phone2      String?       
  domain String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime? @updatedAt
  appointments Appointment[]
  chats Chat[]
  user   User?   @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId Int? @unique

  @@map("Doctors")
}

model Appointment {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  date        DateTime?
  endDate     DateTime?
  status      String?
  note String?
  verified    Boolean?
  patientId   Int?
  doctorId    Int?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  doctor      Doctor?   @relation(fields: [doctorId], references: [id], onDelete: SetNull)
  patient     Patient?  @relation(fields: [patientId], references: [id], onDelete: SetNull)

  @@map("Appointments")
}

model Chat {
  id Int @id @default(autoincrement())
  sessionId String? @unique
  patientId Int
  patient Patient @relation(fields: [patientId], references: [id])
  doctorId Int
  doctor Doctor @relation(fields: [doctorId], references: [id])
  messages Message[]
  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt
  
  @@map("Chats")
}

model Message {
  id Int @id @default(autoincrement())
  sender User @relation(fields: [senderId], references: [id])
  senderId Int
  chat Chat @relation(fields: [chatId], references: [sessionId])
  chatId String
  content String?
  mediaUrl      String?  
  mediaType     String?   
  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt

  @@map("Messages")
}

model AuditLog {
  id          Int      @id @default(autoincrement())
  entity      String   
  entityId    Int      
  action      String   
  changes     Json?    
  userId Int     
  timestamp   DateTime @default(now())

  @@map("Logs")
}
